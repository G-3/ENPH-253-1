#include "PersistDest.h"
#include "../World.h"
#include "../HLRobot.h"

using namespace World;
using namespace HLRobot;

namespace PathPlan{
    PersistDest::PersistDest(World::Node *destLast, World::Node *destBase) : ultimateLast(destLast), ultimateBase(destBase){
       baseCounter = 0;
    }

    Node *PersistDest::getNextDest(Node *base){
        Node *destNode = 0;
        if(base == path[baseCounter]){
            destNode = path[baseCounter + 1];
        }
        return destNode;
    }
    
    void PersistDest::finishedIntersect(){
        baseCounter += 1;
        
        lastNode = baseNode;
        baseNode = destNode;
        
        // if we entered the last stretch towards ultimateLast 
        // set destination to ultimateBase
        if (baseNode == ultimateLast){
            destNode = ultimateBase;   
        }
        // if we are heading towards ultimateBase, there is no more destination
        else if(baseNode == ultimateBase){
            destNode = 0;
        }
        // otherwise just keep on following the path
        else{
            destNode = getNextDest(baseNode); 
        }
    } 

    void PersistDest::finishedTurnAround(){
        // if the node we were coming from was our destination, it was intended
        if(lastNode == path[baseCounter + 1]){
            // shift to the next base
            baseCounter += 1;
            // we are going to where we were coming from
            lastNode = baseNode;
            baseNode = lastNode;
            destNode = getNextDest(baseNode);
            
        }
        // if it was unintentional we want to remap
        else{
            lastNode = baseNode;
            baseNode = lastNode;

            // We want to find a new path to the first destination node
            World::updatePath(baseNode->id, ultimateLast->id);
            
            // the 0th element in the path is now our base
            baseCounter = 0;
            
            // get the new destination
            destNode = getNextDest(baseNode); 
        }
    }
}
